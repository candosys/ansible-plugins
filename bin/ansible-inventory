#!/usr/bin/env python

# (c) 2013-2014, Serge van Ginderachter <serge@vanginderachter.be>
#
# This file was based on bin/ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

########################################################

import sys
import os
import stat
import errno
import yaml

import ansible.constants as C
from ansible.utils.cli import base_parser
from ansible.parsing import DataLoader
from ansible.vars import VariableManager
from ansible import errors
from ansible.inventory import Inventory
from ansible.parsing.utils.jsonify import jsonify

########################################################


class Cli(object):

    # ----------------------------------------------

    def __init__(self):
        self.parse()

    # ----------------------------------------------

    def parse(self):

        parser = base_parser(
            usage='%prog <host-pattern> [options]'
        )
        parser.add_option('-l', '--limit', default=C.DEFAULT_SUBSET, dest='subset',
            help='further limit selected hosts to an additional pattern')
        # dump
        parser.add_option('-y', '--yaml', dest='yaml', action='store_true',
            help="dump variables in yaml format")
        parser.add_option('-j', '--json', '--list', dest='json', action='store_true',
            help="dump variables in InventoryScript json format")
        parser.add_option('-p', '--pretty', dest='pretty', action='store_true',
            help="dump variables in pretty InventoryScript json format")
        parser.add_option('-m', '--merge', dest='merge', action='store_true',
            help="when dumping, merge host and group variables into host variables")
        parser.add_option('--host', dest='host', action='store_true',
            help="n/a for backwards compatibility as ansible inventory script")
        # tree
        parser.add_option('-t', '--tree', dest='tree', action='store_true',
            help="print a tree/forst view of the inventory")
        parser.add_option('-n', '--nodes', dest='nodes', action='store_true',
            help="also show nodes when printing the inventory tree")
        parser.add_option('-d', '--depth', dest='depth',
            help="limit the inventory tree to this given depth")

        options, args = parser.parse_args()
        # need one of these options at least
        if not (options.yaml or
                options.json or
                options.pretty or
                options.host or
                options.tree
                ) or len(args) > 1:
            parser.print_help()
            sys.exit(1)
        # only 1 arg needed, save it as an option
        if len(args) == 0:
            options.pattern = 'all'
        else:
            options.pattern = args[0]
        if options.pretty:
            options.json = True

        self.options = options

    # ----------------------------------------------

    def inv_init(self):

        if self.options.host:
            return {}

        loader = DataLoader()
        variable_manager = VariableManager()
        self.inventory = Inventory(loader=loader, variable_manager=variable_manager, host_list=self.options.inventory)
        if self.options.subset:
            self.inventory.subset(self.options.subset)
        hosts = self.inventory.list_hosts(self.options.pattern)
        if len(hosts) == 0:
            print >>sys.stderr, "No hosts matched"
            sys.exit(1)


    def dump(self):

        results = {'_meta': {'hostvars': {}}}

        # get inventory groups, their vars, children and hosts into result set
        groups = self.inventory.get_groups()
        for group in groups:
            host_list = [h.name for h in group.hosts ]
            child_groups_list = [g.name for g in group.child_groups ]
            results[group.name] = dict(children=child_groups_list, hosts=host_list)
            # get groupvars into result set
            if not self.options.merge:
                results[group.name]['vars'] = group.get_vars()

        # get hostvars into result set
        for host in self.inventory.get_hosts():
            if not self.options.merge:
                results['_meta']['hostvars'][host.name] = host.vars
            else:
                results['_meta']['hostvars'][host.name] = host.get_vars()


        if self.options.yaml:
            print yaml.safe_dump(results)
        else:
            print jsonify(results, format=self.options.pretty)

        return results

    # ----------------------------------------------

    def tree(self):

        if self.options.depth:
            maxdepth = int(self.options.depth)
        else:
            maxdepth = None

        def print_depth(name, depth, extra=""):

            if depth !=  0:
                tree = "|  " * (depth-1) + "|--"
            else:
                tree = ""
            print "%s %s %s" % (tree, name, extra)


        def print_group_tree(group, maxdepth):

            if maxdepth is None or group.depth <= maxdepth:
                parent_groups_names = [ '%s(%s)' % (x.name, x.depth) for x in group.parent_groups ]
                groups_hosts_names = [h.name for h in group.hosts]

                print_depth(group.name, group.depth)
                for child in group.child_groups:
                    print_group_tree(child, maxdepth)
                if self.options.nodes and len(groups_hosts_names) > 0:
                    for h in groups_hosts_names:
                        print_depth(h, group.depth+1)

        basegroup = self.inventory.get_group(self.options.pattern)
        print_group_tree(basegroup, maxdepth)

    # ----------------------------------------------

    def run(self):
        if self.options.host:
            print '{}'
        elif self.options.json or cli.options.yaml:
            cli.inv_init()
            results = cli.dump()
        elif self.options.tree:
            cli.inv_init()
            results = cli.tree()

########################################################

if __name__ == '__main__':
    try:
        cli = Cli()
        cli.run()
    except errors.AnsibleError, e:
        # Generic handler for ansible specific errors
        print "ERROR: %s" % str(e)
        sys.exit(1)

